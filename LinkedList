class LinkedListBasic:
    def __init__(self, newItem):
        self.item = newItem
        self.next = None
        
class LinkedStack:
    def __init__(self):
        self.__list = LinkedListBasic(newItem=None)
        
        
    def push(self, newItem):
        newNode = LinkedListBasic(newItem)
        newNode.next = self.__list
        self.__list = newNode
        
    def pop(self):
        if self.isEmpty():
            return None
        else:
            poppedNode = self.__list
            self.__list = self.__list.next
            return poppedNode.item
        
    def top(self):
        if self.isEmpty():
            return None
        else:
            return self.__list.item
         
    def isEmpty(self)-> bool:
        return self.__list.item is None
        
    def popAll(self):
        self.__list = LinkedListBasic(newItem=None)
        
    def printStack(self):
        print("stack from top:", end='')
        curr = self.__list
        while curr.next is not None:
            print(curr.item, end=' ')
            curr = curr.next
        print(curr.item)
  
if __name__ == "__main__":
            
    st1 = LinkedStack()
    st1.push(100)
    st1.push(200)
    print("Top is", st1.top())
    st1.pop()
    st1.push('Monday')
    st1.printStack()
    print('isEmpty?', st1.isEmpty())
